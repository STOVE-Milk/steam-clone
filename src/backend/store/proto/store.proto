syntax = "proto3";

package storepb;

option go_package = "github.com/STOVE-Milk/steam-clone/store/proto;storepb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// gRPC의 통신 방법인 proto buffer를 사용하기 위한 메세지와 서비스를 정의하는 파일입니다.
// 데이터 통신을 적절히 하기 위해 프론트 역할의 팀원들과 많은 대화를 하며 구조화 하였습니다.


service Store {
    rpc GetCategoryList(google.protobuf.Empty) returns (CategoryListResponse) {
        option (google.api.http) = {
            get: "/store/categories"
        };
    }
    rpc GetSortingGameList(SortingParamRequest) returns (GameSimpleListResponse){
        option (google.api.http) = {
            get: "/store/games"
        };
    }
    rpc GetGame(GameIdQueryParamRequest) returns (GameDetailResponse){
        option (google.api.http) = {
            get: "/store/games/{game_id}"
        };
    }
    rpc GetReviewList(GameIdQueryParamRequest) returns (ReviewListResponse){
        option (google.api.http) = {
            get: "/store/games/{game_id}/reviews"
        };
    }
    rpc GetGameListInCart(GameIdListQueryParamRequest) returns (GameSimpleListResponse){
        option (google.api.http) = {
            get: "/store/cart/{game_id_list}"
        };
    }
    rpc GetUserData(google.protobuf.Empty) returns (UserDataResponse){
        option (google.api.http) = {
            get: "/store/userdata"
        };
    }
    rpc GetGameListInWishlist(google.protobuf.Empty) returns (GameSimpleListResponse){
        option (google.api.http) = {
            get: "/store/wishes"
        };
    }
    rpc GetGameListByUserId(UserIdQueryParamRequest) returns (GameSimpleListResponse){
        option (google.api.http) = {
            get: "/store/users/{user_id}/games"
        };
    }
    rpc GetSearchingGameList(SearchingContentQueryParamRequest) returns (GameSimpleListResponse){
        option (google.api.http) = {
            get: "/store/search"
        };
    }
    rpc PostWishlist(GameIdQueryParamRequest) returns (IsSuccessResponse){
        option (google.api.http) = {
            post: "/store/wishes"
            body: "*"
        };
    }
    rpc DeleteWishlist(GameIdQueryParamRequest) returns (IsSuccessResponse){
        option (google.api.http) = {
            delete: "/store/wishes/{game_id}"
        };
    }
    rpc PostReview(ReviewQueryRequest) returns (IsSuccessResponse){
        option (google.api.http) = {
            post: "/store/games/{game_id}/reviews"
            body: "*"
        };
    }
    rpc PatchReview(ReviewQueryRequest) returns (IsSuccessResponse){
        option (google.api.http) = {
            patch: "/store/games/reviews/{review_id}"
            body: "*"
        };
    }
    rpc DeleteReview(ReviewQueryRequest) returns (IsSuccessResponse){
        option (google.api.http) = {
            delete: "/store/games/reviews/{review_id}"
        };
    }
    rpc GameInstall(GameIdQueryParamRequest) returns (IsSuccessResponse){
        option (google.api.http) = {
            patch: "/store/games/install"
            body: "*"
        };
    }
    rpc GameUninstall(GameIdQueryParamRequest) returns (IsSuccessResponse){
        option (google.api.http) = {
            patch: "/store/games/uninstall"
            body: "*"
        };
    }
}


//응답 값을 줄 때 사용할 message
message UserDataResponse{
    int32 code = 1;
    string message = 2;
    UserData data = 3;
    message UserData{
        repeated int32 wish_list = 1 [json_name = "wish_list"];
        repeated int32 purchase_list = 2 [json_name = "purchase_list"];
    }
}


message ReviewListResponse{
    int32 code = 1;
    string message = 2;
    ReviewList data = 3;
    message ReviewList{
        repeated Review review_list = 1 [json_name = "review_list"];
    }
}

message CategoryListResponse{
    int32 code = 1;
    string message = 2;
    CategoryList data = 3;
    message CategoryList{
        repeated string category_list = 1 [json_name = "category_list"];
    }
}

message GameSimpleListResponse{
    int32 code = 1;
    string message = 2;
    GameSimpleList data = 3;
    message GameSimpleList{
        repeated GameSimple game_list = 1 [json_name = "game_list"];
    }
}

message GameDetailResponse{
    int32 code = 1;
    string message = 2;
    Game data = 3;
    message Game{
        GameDetail game = 1;
    }
}

message IsSuccessResponse{
    int32 code = 1;
    string message = 2;
    Success data = 3;
    message Success{
        bool success = 1;
    }
}

// 요청 값 및 응답값에 임베드 될 message
message Review{
    int32 id = 1;
    int32 user_id = 2 [json_name = "user_id"];
    string displayed_name = 3 [json_name = "displayed_name"];
    Profile profile = 4;
    string content = 5;
    int32 recommendation = 6;
    google.protobuf.Timestamp created_at = 7 [json_name = "created_at"];
    google.protobuf.Timestamp updated_at = 8 [json_name = "updated_at"];
    message Profile{
        string image = 1;
        string description = 2;
    }
}



message GameDetail{
    int32 id = 1;
    string name = 2;
    string description_snippet = 3 [json_name = "description_snippet"];
    int32 price = 4;
    int32 sale = 5;
    ContentsPath image = 6;
    ContentsPath video = 7;
    repeated string category_list = 8 [json_name = "category_list"];
    repeated string os_list = 9 [json_name = "os_list"];
    int32 download_count = 10 [json_name = "download_count"];
    string description = 11;
    Publisher publisher = 12;
    int32 review_count = 13 [json_name = "review_count"];
    int32 recommend_count = 14 [json_name = "recommend_count"];
    repeated string language = 15;
    //SystemRequirements system_least = 14 [json_name = "system_least"];
    //SystemRequirements system_recommend = 15 [json_name = "system_recommend"];
}

message Publisher{ 
    int32 id = 1;
    string name = 2;
}

message SystemRequirements{
    string os = 1;
    string processor= 2;
    string memory= 3;
    string graphics = 4;
    string storage = 7;
    string additional_notes= 9 [json_name = "additional_notes"];
}

// 간단한 게임 정보를 나타내는 message
message GameSimple {
    int32 id = 1;
    string name = 2;
    string description_snippet = 3 [json_name = "description_snippet"];
    int32 price = 4;
    int32 sale = 5;
    int32 review_count = 6 [json_name = "review_count"];
    int32 recommend_count =7 [json_name = "recommend_count"];
    ContentsPath image = 8;
    ContentsPath video = 9;
    repeated string category_list = 10 [json_name = "category_list"];
    repeated string os_list = 11 [json_name = "os_list"];
    int32 download_count = 12 [json_name = "download_count"];
}

message ContentsPath{
    string main = 1;
    repeated string sub = 2;
}


//요청에 사용되는 message
message GameIdQueryParamRequest{
    int32 game_id = 1;
}

message GameIdListQueryParamRequest{
    string game_id_list = 1;
}
message SearchingContentQueryParamRequest{
    string content = 1;
}

message SortingParamRequest{
    string category=1;
    int32 page = 2;
    int32 size = 3;
    string sort = 4;
}

message ReviewQueryRequest{
    int32 review_id = 1 [json_name = "review_id"];
    int32 game_id = 2 [json_name = "game_id"];
    string content = 3;
    int32 recommendation = 4;
}
message UserIdQueryParamRequest{
    int32 user_id = 1;
}
