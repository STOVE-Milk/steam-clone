```
Class: entity.redis.KakaoPayApproveResponseCache
이유: payment.service.kakaopay.cancel() 의 로직 변경으로 인해 필요가 없어서 삭제

@Builder
@Data
@NoArgsConstructor(access = AccessLevel.PACKAGE)
@AllArgsConstructor(access = AccessLevel.PACKAGE)
@RedisHash(value = "kakaopay", timeToLive = 600)
public class KakaoPayApproveResponseCache {
    @Id
    private String aid;
    private String tid;
    private String cid;
    private Integer total;
    private Integer taxFree;
    private String createdAt;
    private String approvedAt;
}
```
Class: entity.KakaoPayApproveResponse
이유: payment.service.kakaopay.cancel() 의 로직 변경으로 인해 필요가 없어서 삭제

public KakaoPayApproveResponseCache toHash() {
    return KakaoPayApproveResponseCache.builder()
            .aid(this.aid)
            .tid(this.tid)
            .cid(this.cid)
            .total(this.amount.getTotal())
            .taxFree(this.amount.getTaxFree())
            .createdAt(this.createdAt)
            .approvedAt(this.approvedAt)
            .build();
}
```
Class: service.PurchaseService
이유: 로깅 기능을 MongoDB를 사용하여 삭제
private void logPurchase(User user, List<GameDto> games) {
    List<PurchaseLog> logs = games.stream()
                    .map(game -> PurchaseLog.builder()
                            .userId(user.getIdx())
                            .gameId(game.getIdx())
                            .price(game.getPrice())
                            .sale(game.getSale())
                            .country(user.getCountry())
                            .build()
                    ).collect(Collectors.toList());
    purchaseLogRepository.saveAll(logs);
}
```