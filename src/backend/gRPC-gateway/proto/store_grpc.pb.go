// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/store.proto

package storepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	GetCategoryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoryListResponse, error)
	GetSortingGameList(ctx context.Context, in *SortingParamRequest, opts ...grpc.CallOption) (*GameSimpleListResponse, error)
	GetGame(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*GameDetailResponse, error)
	GetReviewList(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*ReviewListResponse, error)
	GetGameListInCart(ctx context.Context, in *GameIdListQueryParamRequest, opts ...grpc.CallOption) (*GameSimpleListResponse, error)
	GetUserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserDataResponse, error)
	GetGameListInWishlist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameSimpleListResponse, error)
	GetSearchingGameList(ctx context.Context, in *SearchingContentQueryParamRequest, opts ...grpc.CallOption) (*GameSimpleListResponse, error)
	PostWishlist(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	DeleteWishlist(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	PostReview(ctx context.Context, in *ReviewQueryRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	PatchReview(ctx context.Context, in *ReviewQueryRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	DeleteReview(ctx context.Context, in *ReviewQueryRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	GameInstall(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
	GameUninstall(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) GetCategoryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoryListResponse, error) {
	out := new(CategoryListResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetSortingGameList(ctx context.Context, in *SortingParamRequest, opts ...grpc.CallOption) (*GameSimpleListResponse, error) {
	out := new(GameSimpleListResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetSortingGameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetGame(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*GameDetailResponse, error) {
	out := new(GameDetailResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetReviewList(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*ReviewListResponse, error) {
	out := new(ReviewListResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetReviewList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetGameListInCart(ctx context.Context, in *GameIdListQueryParamRequest, opts ...grpc.CallOption) (*GameSimpleListResponse, error) {
	out := new(GameSimpleListResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetGameListInCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetUserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetGameListInWishlist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameSimpleListResponse, error) {
	out := new(GameSimpleListResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetGameListInWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetSearchingGameList(ctx context.Context, in *SearchingContentQueryParamRequest, opts ...grpc.CallOption) (*GameSimpleListResponse, error) {
	out := new(GameSimpleListResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GetSearchingGameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) PostWishlist(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/PostWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) DeleteWishlist(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/DeleteWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) PostReview(ctx context.Context, in *ReviewQueryRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/PostReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) PatchReview(ctx context.Context, in *ReviewQueryRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/PatchReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) DeleteReview(ctx context.Context, in *ReviewQueryRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GameInstall(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GameInstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GameUninstall(ctx context.Context, in *GameIdQueryParamRequest, opts ...grpc.CallOption) (*IsSuccessResponse, error) {
	out := new(IsSuccessResponse)
	err := c.cc.Invoke(ctx, "/storepb.Store/GameUninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	GetCategoryList(context.Context, *emptypb.Empty) (*CategoryListResponse, error)
	GetSortingGameList(context.Context, *SortingParamRequest) (*GameSimpleListResponse, error)
	GetGame(context.Context, *GameIdQueryParamRequest) (*GameDetailResponse, error)
	GetReviewList(context.Context, *GameIdQueryParamRequest) (*ReviewListResponse, error)
	GetGameListInCart(context.Context, *GameIdListQueryParamRequest) (*GameSimpleListResponse, error)
	GetUserData(context.Context, *emptypb.Empty) (*UserDataResponse, error)
	GetGameListInWishlist(context.Context, *emptypb.Empty) (*GameSimpleListResponse, error)
	GetSearchingGameList(context.Context, *SearchingContentQueryParamRequest) (*GameSimpleListResponse, error)
	PostWishlist(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error)
	DeleteWishlist(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error)
	PostReview(context.Context, *ReviewQueryRequest) (*IsSuccessResponse, error)
	PatchReview(context.Context, *ReviewQueryRequest) (*IsSuccessResponse, error)
	DeleteReview(context.Context, *ReviewQueryRequest) (*IsSuccessResponse, error)
	GameInstall(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error)
	GameUninstall(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) GetCategoryList(context.Context, *emptypb.Empty) (*CategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedStoreServer) GetSortingGameList(context.Context, *SortingParamRequest) (*GameSimpleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSortingGameList not implemented")
}
func (UnimplementedStoreServer) GetGame(context.Context, *GameIdQueryParamRequest) (*GameDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedStoreServer) GetReviewList(context.Context, *GameIdQueryParamRequest) (*ReviewListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewList not implemented")
}
func (UnimplementedStoreServer) GetGameListInCart(context.Context, *GameIdListQueryParamRequest) (*GameSimpleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameListInCart not implemented")
}
func (UnimplementedStoreServer) GetUserData(context.Context, *emptypb.Empty) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedStoreServer) GetGameListInWishlist(context.Context, *emptypb.Empty) (*GameSimpleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameListInWishlist not implemented")
}
func (UnimplementedStoreServer) GetSearchingGameList(context.Context, *SearchingContentQueryParamRequest) (*GameSimpleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchingGameList not implemented")
}
func (UnimplementedStoreServer) PostWishlist(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostWishlist not implemented")
}
func (UnimplementedStoreServer) DeleteWishlist(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishlist not implemented")
}
func (UnimplementedStoreServer) PostReview(context.Context, *ReviewQueryRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReview not implemented")
}
func (UnimplementedStoreServer) PatchReview(context.Context, *ReviewQueryRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchReview not implemented")
}
func (UnimplementedStoreServer) DeleteReview(context.Context, *ReviewQueryRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedStoreServer) GameInstall(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameInstall not implemented")
}
func (UnimplementedStoreServer) GameUninstall(context.Context, *GameIdQueryParamRequest) (*IsSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameUninstall not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetCategoryList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetSortingGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortingParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetSortingGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetSortingGameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetSortingGameList(ctx, req.(*SortingParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIdQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetGame(ctx, req.(*GameIdQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetReviewList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIdQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetReviewList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetReviewList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetReviewList(ctx, req.(*GameIdQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetGameListInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIdListQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetGameListInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetGameListInCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetGameListInCart(ctx, req.(*GameIdListQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetUserData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetGameListInWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetGameListInWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetGameListInWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetGameListInWishlist(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetSearchingGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchingContentQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetSearchingGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GetSearchingGameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetSearchingGameList(ctx, req.(*SearchingContentQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_PostWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIdQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).PostWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/PostWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).PostWishlist(ctx, req.(*GameIdQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_DeleteWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIdQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeleteWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/DeleteWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeleteWishlist(ctx, req.(*GameIdQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_PostReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).PostReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/PostReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).PostReview(ctx, req.(*ReviewQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_PatchReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).PatchReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/PatchReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).PatchReview(ctx, req.(*ReviewQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeleteReview(ctx, req.(*ReviewQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GameInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIdQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GameInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GameInstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GameInstall(ctx, req.(*GameIdQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GameUninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIdQueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GameUninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storepb.Store/GameUninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GameUninstall(ctx, req.(*GameIdQueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storepb.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryList",
			Handler:    _Store_GetCategoryList_Handler,
		},
		{
			MethodName: "GetSortingGameList",
			Handler:    _Store_GetSortingGameList_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _Store_GetGame_Handler,
		},
		{
			MethodName: "GetReviewList",
			Handler:    _Store_GetReviewList_Handler,
		},
		{
			MethodName: "GetGameListInCart",
			Handler:    _Store_GetGameListInCart_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _Store_GetUserData_Handler,
		},
		{
			MethodName: "GetGameListInWishlist",
			Handler:    _Store_GetGameListInWishlist_Handler,
		},
		{
			MethodName: "GetSearchingGameList",
			Handler:    _Store_GetSearchingGameList_Handler,
		},
		{
			MethodName: "PostWishlist",
			Handler:    _Store_PostWishlist_Handler,
		},
		{
			MethodName: "DeleteWishlist",
			Handler:    _Store_DeleteWishlist_Handler,
		},
		{
			MethodName: "PostReview",
			Handler:    _Store_PostReview_Handler,
		},
		{
			MethodName: "PatchReview",
			Handler:    _Store_PatchReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _Store_DeleteReview_Handler,
		},
		{
			MethodName: "GameInstall",
			Handler:    _Store_GameInstall_Handler,
		},
		{
			MethodName: "GameUninstall",
			Handler:    _Store_GameUninstall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/store.proto",
}
