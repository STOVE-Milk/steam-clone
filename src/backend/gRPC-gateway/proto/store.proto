syntax = "proto3";

package storepb;

option go_package = "github.com/STOVE-Milk/steam-clone/store/proto;storepb";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service Store {
    rpc GetCategoryList(google.protobuf.Empty) returns (CategoryListResponse) {
        option (google.api.http) = {
            get: "/store/categories"
        };
    }
    rpc GetGameListByCategory(CategoryQueryParamRequest) returns (GameSimpleListResponse){
        option (google.api.http) = {
            get: "/store/games"
        };
    }
    rpc GetGame(GameIdQueryParamRequest) returns (GameDetailResponse){
        option (google.api.http) = {
            get: "/store/games/{game_id}"
        };
    }
    rpc GetDiscountingGameList(google.protobuf.Empty) returns(GameSimpleListResponse){
        option (google.api.http) = {
            get: "/store/games/discounting"
        };
    }
    rpc GetReviewList(GameIdQueryParamRequest) returns (ReviewListResponse){
        option (google.api.http) = {
            get: "/store/games/{game_id}/reviews"
        };
    }
}


message ReviewListResponse{
    int32 code = 1;
    string message = 2;
    ReviewList data = 3;
    message ReviewList{
        repeated Review review_list = 1 [json_name = "review_list"];
    }
}

message Review{
    int32 id = 1;
    int32 user_id = 2 [json_name = "user_id"];
    string displayed_name = 3 [json_name = "displayed_name"];
    string content = 4;
    int32 recommendation = 5;
}

message CategoryListResponse{
    int32 code = 1;
    string message = 2;
    CategoryList data = 3;
    message CategoryList{
        repeated string category_list = 1 [json_name = "category_list"];
    }
}

message GameSimpleListResponse{
    int32 code = 1;
    string message = 2;
    GameSimpleList data = 3;
    message GameSimpleList{
        repeated GameSimple game_simple_list = 1 [json_name = "game_simple_list"];
    }
}

message GameDetailResponse{
    int32 code = 1;
    string message = 2;
    GameDetail data = 3;
}


message GameDetail{
    int32 game_id = 1 [json_name = "game_id"];
    string name = 2;
    string description_snippet = 3 [json_name = "description_snippet"];
    int32 price = 4;
    int32 sale = 5;
    ContentsPath image = 6;
    ContentsPath video = 7;
    repeated string category_list = 8 [json_name = "category_list"];
    repeated string os_list = 9 [json_name = "os_list"];
    string description = 10;
    Publisher publisher = 11;
    int32 review_count = 12 [json_name = "review_count"];
    int32 recommend_count = 13 [json_name = "recommend_count"];
    repeated string language = 16;
    //SystemRequirements system_least = 14 [json_name = "system_least"];
    //SystemRequirements system_recommend = 15 [json_name = "system_recommend"];
}

message Publisher{ 
    int32 id = 1;
    string name = 2;
}

message SystemRequirements{
    string os = 1;
    string processor= 2;
    string memory= 3;
    string graphics = 4;
    string storage = 7;
    string additional_notes= 9 [json_name = "additional_notes"];
}

// 간단한 게임 정보를 나타내는 message
message GameSimple {
    int32 game_id = 1 [json_name = "game_id"];
    string name = 2;
    string description_snippet = 3 [json_name = "description_snippet"];
    int32 price = 4;
    int32 sale = 5;
    ContentsPath image = 6;
    ContentsPath video = 7;
    repeated string category_list = 8 [json_name = "category_list"];
    repeated string os_list = 9 [json_name = "os_list"];
}


// 미디어 컨텐츠를 Response 해야할 때.
message ContentsPath{
    string main = 1;
    repeated string sub = 2;
}


//Request Parameter에 사용되는 message

// Client 측에서 하나의 카테고리를 Request 받을 때. 
message CategoryQueryParamRequest{
    string category = 1;
}

message GameIdQueryParamRequest{
    int32 game_id = 1;
}